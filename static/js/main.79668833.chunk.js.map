{"version":3,"sources":["components/MainChart.js","components/StockStats.js","components/Exchange.js","components/InfoStock.js","App.js","serviceWorker.js","index.js"],"names":["MainChart","props","useState","dataUpdate","data","length","ticker","width","height","dataKey","label","value","angle","position","time","stroke","activeDot","r","StockStats","info","JSON","parse","Object","values","k","entries","realData","key","min","Math","apply","map","o","max","ultimo","variacion","className","stock","abs","round","Number","EPSILON","Exchange","exchanges","exchangeData","stats","sumAcciones","forEach","exchange","particular","volumenCompra","volumenVenta","volumenTotal","cantidadAcciones","listed_companies","participacion","name","i","indexOf","push","market","InfoStock","socket","io","protocolo","path","App","stockCompanies","setstockCompanies","setstock","setstats","setexchange","startSocket","connect","on","current","state","volumenTransado","volume","useEffect","emit","company_name","currentData","bolsa","stocks","sleep","ms","Promise","res","setTimeout","a","console","log","onClick","disconnect","stringify","company","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.79668833.chunk.js","sourcesContent":["import React from 'react';\nimport { useEffect, useState } from 'react';\nimport {\n  BarChart,\n  Bar,\n  Line,\n  LineChart,\n  XAxis,\n  YAxis,\n  Tooltip\n} from 'recharts';\n\n\n\nexport default function MainChart(props) {\n  const [dataUpdate, setDataUpdate] = useState([]);\n\n  \n  const data = props.data;\n\n var ticker = 'NaN'\n  if (dataUpdate.length > 0){\n    ticker = dataUpdate[0].ticker\n  }\n  // 2. render the line chart using the state\n  return (\n    <div>\n      <LineChart width={500} height={300} data={data}>\n        <XAxis dataKey=\"tima\" label={{value:'Tiempo'}}/>\n        <YAxis  label={{ value:\"Precio\", angle: 90, position:\"insideLeft\" }}/>\n        <Tooltip/>\n\n        <Line time=\"monotone\" dataKey=\"value\" stroke=\"#999\" activeDot={{r: 8}} />\n      </LineChart>\n\n    </div>\n  );\n};","import React from 'react';\n\nexport default function StockStats(props) {\n  \n    var info = JSON.parse(props.data)\n    info = Object.values(info)\n    var k = {}\n    for (var [key, value] of Object.entries(props.realData)) {\n        let min = Math.min.apply(Math, props.realData[key].map(function(o) { return o.value; }))\n        let max = Math.max.apply(Math, props.realData[key].map(function(o) { return o.value; }))\n        let ultimo = props.realData[key][props.realData[key].length - 1].value\n        let variacion = (ultimo-props.realData[key][0].value) / props.realData[key][0].value\n        k[key] = {}\n        k[key]['min'] = min \n        k[key]['max'] = max \n        k[key]['ultimo'] = ultimo \n        k[key]['variacion'] = variacion \n    }\n  return (\n    <div>\n    \n    <h3> Actualmente se muestra la información de {info.length} acciones</h3>\n    <br></br>\n        <table className=\"table\"> \n    <thead>\n      <tr className=\"table\">\n          <th> Ticker </th>\n          <th> Volumen Transado  </th>\n          <th> Alto Historico  </th>\n          <th> Bajo Historico </th>\n          <th> Último Precio </th>\n          <th> Variación Porcentual </th>\n          <th> Volumen Compra </th>\n          <th> Volumen Venta </th>\n      </tr>\n      </thead>\n      <thead>\n    \n      {info.map((stock) => (\n        <tr>\n            <td> {stock['ticker']} </td>\n            <td> {Math.abs(stock['volumenTransado'])} </td>\n            <td> {k[stock['ticker']] ? k[stock['ticker']]['max'] : 0} </td>\n            <td> {k[stock['ticker']] ? k[stock['ticker']]['min'] : 0} </td>\n            <td> {k[stock['ticker']] ? k[stock['ticker']]['ultimo'] : 0} </td>\n            <td> {k[stock['ticker']] ? Math.round((k[stock['ticker']]['variacion'] + Number.EPSILON) * 10000) / 10000 : 0} </td>\n            <td> {stock['volumenCompra']} </td>\n            <td> {stock['volumenVenta']} </td>\n        </tr>\n        ))\n        }\n        </thead>\n     \n      </table>\n    </div>\n  );\n};","import React from 'react';\n\n\n\n\nexport default function Exchange(props) {\n    \n    \n    var info = JSON.parse(props.data);\n    info = Object.values(info);\n    let exchanges = props.exchangeData\n    let stats = []\n    let sumAcciones = 0\n    exchanges.forEach(function(exchange) {\n\n        let particular = {volumenCompra: 0, volumenVenta: 0,volumenTotal: 0,\n            cantidadAcciones: exchange.listed_companies.length,participacion : 0, name: exchange.name}\n\n        for (let i = 0; i < info.length; i++) {\n    \n            if (exchange.listed_companies.indexOf(info[i]['companyName']) > -1){\n                particular['volumenCompra'] += Math.abs(info[i]['volumenCompra']);\n                particular['volumenVenta'] += Math.abs(info[i]['volumenVenta']);\n                particular['volumenTotal'] += Math.abs(info[i]['volumenTransado']);\n                sumAcciones += Math.abs(info[i]['volumenTransado'])\n            }\n        };\n        stats.push(particular)\n    });\n    \n    stats.map((market) => {\n        sumAcciones += market['cantidadAcciones'] \n    })\n    \n\n  return (\n    <div>\n        <br></br>\n        <h2>Información de mercados</h2>\n        <br></br>\n        <table className=\"table\"> \n    <thead>\n      <tr className=\"table\">\n          <th> Nombre de Exchange </th>\n          <th> Volumen Transado  </th>\n          <th> Volumen Compra  </th>\n          <th> Volumen Venta </th>\n          <th> Numero acciones </th>\n          <th> Participacion Mercado </th>\n\n      </tr>\n      </thead>\n      <thead>\n    \n      {stats.map((exchange) => (\n        <tr>\n            <td> {exchange['name']} </td>\n            <td> {exchange['volumenTotal'] >= 0 ? exchange['volumenTotal'] : exchange['volumenTotal'] * -1} </td>\n            <td> {exchange['volumenCompra']} </td>\n            <td> {exchange['volumenVenta']} </td>      \n            <td> {exchange['cantidadAcciones']} </td>\n            <td> {Math.abs(exchange['volumenTotal'] / sumAcciones)} </td>\n            \n        </tr>\n        ))\n        }\n        </thead>\n     \n      </table>\n    </div>\n  );\n};","import React from 'react';\n\nexport default function InfoStock(props) {\n  \n    \n    var info = props.data\n    info = Object.values(info);\n  return (\n    <div>\n        <br></br>\n    <h2> Detalle estático Bursatil </h2>\n    <br></br>\n    <table className=\"table\"> \n    <thead>\n      <tr className=\"table\">\n          <th> Nombre de la compañía </th>\n          <th> Ticker de la acción  </th>\n          <th> País de origen  </th>\n      </tr>\n      </thead>\n      <thead>\n      {info.map((stock) => (\n        <tr>\n            \n            <td> {stock['company_name']} </td>\n            <td> {stock['ticker']} </td>\n            <td> {stock['country']} </td>\n        \n        </tr>\n        ))\n        }\n     \n        </thead>\n     \n      </table>\n  \n    </div>\n  );\n};","import io from 'socket.io-client';\nimport React from 'react';\nimport { useEffect, useState } from 'react';\n\n\n\nimport MainChart from './components/MainChart';\nimport StockStats from './components/StockStats';\nimport Exchange from './components/Exchange';\nimport InfoStock from './components/InfoStock';\n\nconst protocolo = \"wss://\";\nconst servidor = \"le-18262636.bitzonte.com\";\nconst ruta = \"/stocks\";\n\nconst socket = io(protocolo + servidor , {\n  path: ruta\n  });\n\n\nfunction App() {\n  \n  const [stockCompanies, setstockCompanies] = useState([]);\n  const [stock, setstock] = useState({})\n  const [stats, setstats] = useState({})\n  const [exchange, setexchange] = useState([])\n\n  const disconnectSocket = () => {\n    socket.disconnect()\n  }\n \n  const startSocket = () => {\n    socket.connect()\n    socket.on('UPDATE', current => {\n\n      var data = {\n        time: current.time,\n        value: current.value\n      }\n      setstock(state => ({...state, [current.ticker]: [...(state[current.ticker] || []), data]}));\n    });\n\n    socket.on('BUY', current=> {\n      \n      setstats(state => \n        ({...state, [current.ticker]: {...state[current.ticker], volumenTransado : state[current.ticker]['volumenTransado']+current.volume}}));\n      setstats(state => \n        ({...state, [current.ticker]: {...state[current.ticker], volumenCompra : state[current.ticker]['volumenCompra']+current.volume}}));\n    })\n\n    socket.on('SELL', current=> {\n      \n      setstats(state => \n        ({...state, [current.ticker]: {...state[current.ticker], volumenTransado : state[current.ticker]['volumenTransado']-current.volume}}));\n      setstats(state => \n        ({...state, [current.ticker]: {...state[current.ticker], volumenVenta : state[current.ticker]['volumenVenta']+current.volume}}));\n    })\n\n  };\n\n useEffect(() => {\n  \n  \n  \n\n  socket.emit('STOCKS', () => {\n  } )\n  socket.on('STOCKS', data => {    \n     \n    for (var i = 0; i < data.length; i++) {\n      let current = data[i]\n  \n      setstats(state => ({...state, [current.ticker]: {...(state[current.ticker] || {}),  'volumenTransado' : 0, 'altoHistorico' : 0, 'bajoHistorico' : 0,\n      'ultimoPrecio' : 0, \n      'variacionPorcentual' : 0, \n      'volumenCompra' : 0, \n      'volumenVenta' : 0, \n      'numeroAcciones' : 0,\n      'ticker': current.ticker,\n      'participacionMercado' : 0,\n      'companyName': current.company_name,\n      'pices': []}}));\n      setstockCompanies(currentData => [...currentData, data[i]])\n    }\n  });\n  \n  socket.emit('EXCHANGES', () => {\n  } )\n  socket.on('EXCHANGES', data => {\n    var bolsas = Object.values(data);\n    bolsas.map((bolsa) => {\n      bolsa.stocks = []\n      setexchange(currentData => [...currentData, bolsa])})\n    })\n  \n    const sleep = ms => new Promise(res => setTimeout(res, ms));\n\n    (async () => {\n      console.log('1');\n      await sleep(500);\n      console.log('2');\n      await sleep(1900);\n      startSocket();\n    })();\n  \n  \n}, [])\n  var graph = false; \n  \n    return(\n      \n    <div>\n      \n      <br></br>\n      <br></br>\n      <h1> Bienvenido al visualizador de Acciones! </h1>\n      <br></br>\n      <hr></hr>\n      <div>\n      <button onClick={() => disconnectSocket()}> Desconectar socket</button>\n      <button onClick={() => startSocket()}> conectar socket</button>\n      <br></br>\n      </div>\n      <hr></hr>\n      <div>\n        <StockStats data={JSON.stringify(stats)} realData={stock}/>\n      </div>\n      <div>\n        <Exchange data={JSON.stringify(stats)} exchangeData={exchange}/>\n      </div>\n      <div>\n        <InfoStock data={stockCompanies}/>\n      </div>\n      <br></br>\n      <hr></hr>\n      <h1>Gráficos de variación de precio</h1>\n      <br></br>\n      <hr></hr>\n      <div>\n      {stockCompanies.map((company) => (\n        <div className=\"chart\"> \n        <h3 className=\"title\"> {company.ticker} </h3>\n          <div> \n            <MainChart key={company.ticker} data={stock[company.ticker]} />\n            <br></br>\n            <hr></hr>\n          </div>\n        </div>\n        \n        ) )     \n      }\n      \n    </div>\n    </div>\n    )\n\n}\n\n\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}